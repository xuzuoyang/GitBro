from functools import partial, wraps
from os import environ
from subprocess import call
from sys import exit
from tempfile import NamedTemporaryFile

from click import secho

from bro.exceptions import (BranchNotFound, GitCmdError, GitError,
                            RemoteNotFound)

print_normal = partial(secho, fg='green', bold=True)
print_error = partial(secho, fg='red', bold=True)


def error_handler(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        try:
            func(*args, **kwargs)
        except GitError as e:
            error = e.message
            if isinstance(e, GitCmdError):
                error = f'{error}\nCommand: {" ".join(e.command)}'
            print_error(error)
            exit(1)

    return wrapper


def validate_branch(repo, *branches):
    try:
        for branch in branches:
            repo.get_branch(branch)
    except BranchNotFound:
        print_error(f'Branch {branch} does not exist.')
        exit(1)


def validate_remote(repo, *remotes):
    try:
        for remote in remotes:
            repo.get_repo(remote)
    except RemoteNotFound:
        print_error(f'Remote {remote} does not exist.')
        exit(1)


def pr_msg_editor():
    EDITOR = environ.get('EDITOR', 'vim')
    msg = '# Title\n\n# Message'
    with NamedTemporaryFile(prefix='GITBRO_EDIT_PR') as tmp_file:
        tmp_file.write(msg.encode())
        tmp_file.flush()
        call([EDITOR, tmp_file.name])
        tmp_file.seek(0)
        return [line.decode('utf8').strip() for line in tmp_file.readlines()]


def pr_msg_parser(raw_msgs):
    '''Parse title and body from raw messages.'''
    titles, messages = [], []
    for msg in raw_msgs:
        if '# Title' in msg:
            collector = titles
        elif '# Message' in msg:
            collector = messages
        else:
            collector.append(msg)

    title = titles[0] if titles else 'Auto generated by gitbro.'
    message = '\n'.join(messages)
    return title, message


def get_pr_msg():
    return pr_msg_parser(pr_msg_editor())
